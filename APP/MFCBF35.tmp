#include "main.h"

volatile uint16_t uwTimerCount = 0;
volatile uint8_t ubStartTimerFlag = 0;
volatile uint8_t flag_10ms = 0;
volatile uint8_t Mode = 0;
Typdef_ProgramPara ProgramPara = {0};

char ubUartRxBuf[RXMAX] = {0};//用来储存串口数据
Typdef_PM2_5 PM2_5 = {0};
#define TEST_TKEY(NB) (MyTKeysB[(NB)].p_Data->StateId == TSL_STATEID_DETECT ||\
                       MyTKeysB[(NB)].p_Data->StateId == TSL_STATEID_DEB_RELEASE_DETECT)
#define TKEY_REL(NB) (MyTKeysB[(NB)].p_Data->StateId == TSL_STATEID_RELEASE)

#define TEST_TKEY1(NB) (MyTKeysB[(NB)].p_Data->StateId == TSL_STATEID_DETECT)

__IO unsigned char KeyNum = 0 ;


void ProcessSensors(void);


/* Private functions prototype -----------------------------------------------*/

void DelayApi(uint16_t uwDelayCnt){    
    //Set the flag to make ISR start to count
    ubStartTimerFlag = 1;
    
    //Wait until expire 
    while(uwTimerCount <= uwDelayCnt);
    
    //Clear flag and timer cnt
    ubStartTimerFlag = 0;
    uwTimerCount = 0;
}


int main( void )
{
    InitAll();
	
	
    //Read_ChipID_Init(&ProgramPara);
    Mode = Mode_Hum;
	//GPIO_WriteLow(GPIOD,GPIO_Pin_2);
	//OLED_SCLK_Clr() ;

	//OLED_SDIN_Clr();
	//OLED_RST_Clr();
	//OLED_DC_Clr();
	//OLED_CS_Clr() ;
	Mode_haltfun();

    while(1){
        	
        while(!flag_10ms);//正常情况下程序10ms循环一次
        flag_10ms = 0;
		//Batt_Test();
	    //if (TSL_user_Action() == TSL_STATUS_OK)
	   //{
		// ProcessSensors(); // Execute sensors related tasks
	  // }
	  // else
	  // {
		  //Execute other tasks...
	  // }
	if(++ProgramPara.Cnt_Minite >= 300){
          if(KeyNum == 0 && Mode != Mode_Init)
          {
                  //Mode_haltfun();//低功耗模式
          }
 			
          ProgramPara.Cnt_Minite = 0;
			  
      }
	if(ProgramPara.Cnt_Minite >= 100){
		ProgramPara.Refresh_flag = 1;//刷新屏幕
	}
		
        switch(Mode){
            case Mode_Init://Board_Init();        
            break;
            case Mode_Hum://Refresh_Humi();
                    
            break;
            
            case Mode_Tem://Refresh_Temp();
                    
            break;
			
            case Mode_Pm2://Pm_Detect();
            break;
            case Mode_Mp://Mp_Test();
            break;

        }
        
        
        
   }
       
}





void InitAll(void){
    InitCpuClock();//该程序中配置为外部时钟 不分频
    //GPIO_Init(GPIOD, GPIO_Pin_2, GPIO_Mode_Out_PP_Low_Fast);//LCD_TEST
      //GPIO_Init(OLED_SCLK_PORT, (GPIO_Pin_TypeDef)OLED_SCLK_PINS, GPIO_Mode_Out_PP_Low_Fast);
  //GPIO_Init(OLED_SDIN_PORT, (GPIO_Pin_TypeDef)OLED_SDIN_PINS, GPIO_Mode_Out_PP_Low_Fast);
  //GPIO_Init(OLED_RST_PORT, (GPIO_Pin_TypeDef)OLED_RST_PINS, GPIO_Mode_Out_PP_Low_Fast);
  //GPIO_Init(OLED_CS_PORT, (GPIO_Pin_TypeDef)OLED_CS_PINS, GPIO_Mode_Out_PP_Low_Fast);
      //GPIO_Init(OLED_SCLK_PORT, (GPIO_Pin_TypeDef)OLED_SCLK_PINS, GPIO_Mode_Out_PP_Low_Fast);

	//GPIO_Init(OLED_DC_PORT, (GPIO_Pin_TypeDef)OLED_DC_PINS, GPIO_Mode_Out_PP_Low_Fast);

	//GPIO_WriteBit(GPIOD , GPIO_Pin_0 ,RESET);  //设置PD5输出低电平 ，使LED1点亮
	TSL_user_Init();//触摸按键初始化
    Usart1Init();//串口初始化
   KEY_Input_Init();//唤醒按键初始化
    LED_Init();//LED初始化
    OLED_Init();		//初始化OLED  
    OLED_Clear();
    //InitTimer1();//用作PWM 读取数值
    InitTimer2();//用于系统总定时，2ms进一次中断
    ITC->ISPR4 &= 0xF3;//将定时器2的优先级调低，低于UART中断
    Sensor_ADC_Init();//ADC初始化
    MCU_Gpio_Init();//5V控制脚初始化
    //EEPROM_INIT();
    Soft_I2C_Int();//IIC脚位初始化
    enableInterrupts();//开总中断
    WWDG->WR = WWDG_WR_RESET_VALUE;
    WWDG->CR = (uint8_t)((uint8_t)(WWDG_CR_WDGA | WWDG_CR_T6) | (uint8_t)WWDG_CNT);
    WWDG->WR = (uint8_t)((uint8_t)(~WWDG_CR_WDGA) & (uint8_t)(WWDG_CR_T6 | WWDG_WIN));

}
/*******************************************************************************
* Function Name  : Usart1Init.
* Description    : Usart1 Init, .
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Usart1Init(void)
{	
    CLK_PeripheralClockConfig(CLK_Peripheral_USART1,ENABLE);
    GPIO_Init(GPIOC, GPIO_Pin_3, GPIO_Mode_Out_OD_HiZ_Fast);//TXD
    GPIO_Init(GPIOC, GPIO_Pin_2, GPIO_Mode_In_PU_No_IT);//RXD
    USART_DeInit(USART1);       //复位UART1 
    /*uart1 波特率9600，8bit(数据)，开启rxd*/
    USART_Init(USART1,(uint32_t)9600,USART_WordLength_8b,USART_StopBits_1,USART_Parity_No,(USART_Mode_Rx | USART_Mode_Tx) );
    USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);
    //SYSCFG_REMAPPinConfig(REMAP_Pin_USART1TxRxPortA,ENABLE);//remap uart1管脚
    USART_Cmd(USART1,ENABLE);
	    
   
}

/*******************************************************************************
* Function Name  : MCU_Gpio_Init.
* Description    : gpio init , .
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void MCU_Gpio_Init(void)
{	
    GPIO_Init(C5VCE_PORT,C5VCE_PIN,GPIO_Mode_Out_PP_High_Fast);//5v_CE脚位控制
    //GPIO_WriteLow(C5VCE_PORT,C5VCE_PIN);
	//充电标志位 输入管脚
	GPIO_Init(BATTSTATUS_PORT,BATTSTATUS_PIN,GPIO_Mode_In_FL_No_IT);//浮空输入

}


/*******************************************************************************
* Function Name  : InitCpuClock.
* Description    : Initial CPU clock, .
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void InitCpuClock(void){
#ifdef HSI_CLOCK
        CLK_DeInit();
        CLK_HSEConfig(CLK_HSE_OFF);//失能外部时钟
        CLK_SYSCLKSourceConfig(CLK_SYSCLKSource_HSI);
        CLK_SYSCLKDivConfig(CLK_SYSCLKDiv_1);//内部不分频
       
		
        CLK_ClockSecuritySystemEnable();
        CLK_HSICmd(ENABLE);
#endif    

}
void InitTimer2(void){


  CLK_PeripheralClockConfig(CLK_Peripheral_TIM2,ENABLE);//启动TIM2

  TIM2_TimeBaseInit(TIM2_Prescaler_1,TIM2_CounterMode_Up,(16000 * 2));//不分频 2毫秒一次进入中断
  TIM2_ClearFlag(TIM2_FLAG_Update);
  TIM2_ARRPreloadConfig(ENABLE);
  TIM2_ITConfig(TIM2_IT_Update, ENABLE);//使能向上计数溢出中断
  TIM2_Cmd(ENABLE);  
}
/*
void InitTimer1(void){
	CLK_PeripheralClockConfig(CLK_Peripheral_TIM1,ENABLE);

	TIM1_DeInit();
	GPIO_Init(GPIOD, (GPIO_Pin_TypeDef)(GPIO_Pin_1), GPIO_Mode_In_FL_No_IT);

	TIM1_TimeBaseInit(0,TIM1_CounterMode_Down,16000,0);//不分频 1毫秒一次进入中断
	TIM1_ClearFlag(TIM1_FLAG_Update);
	TIM1_ARRPreloadConfig(ENABLE);
	TIM1_ITConfig(TIM1_IT_Update, ENABLE);//使能向上计数溢出中断
	TIM1_Cmd(ENABLE);  


}
*/

/**
  * @brief  Manage the activity on sensors when touched/released (example)
  * @param  None
  * @retval None
  */
void ProcessSensors(void)
{
  // Due to LED3 shared between the ECS activity and this routine
  if (!Gv_ProcessSensor && TKEY_REL(0) && TKEY_REL(1) && TKEY_REL(2))
  {
    return;
  }
  
	   // K1
	  if (TEST_TKEY1(0))
	  {
	  	ProgramPara.Cnt_Minite = 0;
		ProgramPara.Refresh_flag = 1;
		KeyNum = 1;
		Mode++;
		if(Mode >=Mode_Mp){
			Mode = Mode_Hum;
		}
	  }
	  else if (TEST_TKEY1(1))
	  { 
	  	ProgramPara.Cnt_Minite = 0;
		ProgramPara.Refresh_flag = 1;
		KeyNum = 2;
		Mode--;
		if(Mode <= Mode_Init){
			Mode = Mode_Mp;
		}
	  }
	  else
	  {
		KeyNum = 0;
	  }

}
/*
void Read_ChipID_Init(Typdef_ProgramPara *programpara)
{
  uint8_t i;
//  uint8_t privilegeID[8] = {0};
  
  uint8_t *pIDStart=(uint8_t *)(ID_BaseAddress + 4);//只读最后8个字节  
#ifdef MP_502
  for(i=0;i<10;i++)//防止漏读 所以多读几遍
  {
    readSomeByte(DEVID_BaseAddress,programpara->Dev_ID,10);
    if(programpara->Dev_ID[0] == 'H' && programpara->Dev_ID[1] == 'C')//如果EEPROM中前两字节是CO的话
    {
      break;
    }           
  }
  
  if(programpara->Dev_ID[0] != 'H' && programpara->Dev_ID[1] != 'C')//如果EEPROM中前两字节不是GA的话   
  {
    programpara->Dev_ID[0] = 'H';
    programpara->Dev_ID[1] = 'C';
    programpara->Dev_ID[2] = 'F';
    for(i = 0; i<7;i++)
    {
         programpara->Dev_ID[i+3] = *pIDStart++;//以独有字节中的后面7字节为ID
    }

  }   
#endif 

#ifdef MP_503
  for(i=0;i<10;i++)//防止漏读 所以多读几遍
  {
    readSomeByte(DEVID_BaseAddress,programpara->Dev_ID,10);
    if(programpara->Dev_ID[0] == 'V' && programpara->Dev_ID[1] == 'O')//如果EEPROM中前两字节是CO的话
    {
      break;
    }           
  }
  
  if(programpara->Dev_ID[0] != 'V' && programpara->Dev_ID[1] != 'O')//如果EEPROM中前两字节不是GA的话   
  {
    programpara->Dev_ID[0] = 'V';
    programpara->Dev_ID[1] = 'O';
    programpara->Dev_ID[2] = 'F';
    for(i = 0; i<7;i++)
    {
         programpara->Dev_ID[i+3] = *pIDStart++;//以独有字节中的后面7字节为ID
    }

  }   
#endif

  
  
}

void Read_SetPPM(Typdef_ProgramPara *programpara)
{
//    uint8_t i = 0;
    //readSomeByte(PPM_BaseAddress,programpara->Alarm.Arr,4);
    readSomeByte(PPMoffset_BaseAddress,programpara->ppm_offset.Arr,4);
    readSomeByte(Offsetflag_BaseAddress,&programpara->flag_revise,1);

}

*/
//-------------------
// CallBack functions
//-------------------

/**
  * @brief  Executed at each timer interruption (option must be enabled)
  * @param  None
  * @retval None
  */
void TSL_CallBack_TimerTick(void)
{
  // Add here your own code...
}


/**
  * @brief  Executed when a sensor is in Error state (example)
  * @param  None
  * @retval None
  */
void MyTKeys_ErrorStateProcess(void)
{
  // Application decision to set the sensor in Off state
  TSL_tkey_SetStateOff();
}


/**
  * @brief  Executed when a sensor is in Off state
  * @param  None
  * @retval None
  */
void MyTKeys_OffStateProcess(void)
{
  // Add here your own processing when a sensor is in Off state
}
#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval None
  */
//uint32_t theline = 0;
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
//theline = line;
  /* Infinite loop */
//  theline = line;
  while (1)
  {
    
  }
}
#endif
